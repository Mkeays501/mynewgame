import pygame
import sys
import os

# Initialize Pygame
pygame.init()

# Screen settings
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Alien Invaders")

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

# Sound effects
try:
    pygame.mixer.music.load('space_ambience.wav')  # Background music
    shoot_sound = pygame.mixer.Sound('laser.wav')
    explosion_sound = pygame.mixer.Sound('explosion.wav')
    pygame.mixer.music.play(-1)  # Loop background music
except Exception as e:
    print(f"Sound files not found: {e}")
    sound_enabled = False
else:
    sound_enabled = True

# Player settings
player_width = 64
player_height = 64
player_speed = 5
lives = 3

# Bullet settings
bullet_width = 8
bullet_height = 24
bullet_speed = 10
bullets = []

# Alien settings
alien_width = 64
alien_height = 64
alien_speed = 2
alien_direction = 1  # 1 = right, -1 = left
aliens = []
alien_drop = 10  # Pixels to drop when hitting edge

# Score
score = 0
font = pygame.font.Font(None, 36)

# Game state
game_over = False

def reset_game():
    global player, aliens, bullets, score, lives, game_over, alien_direction
    player = pygame.Rect(SCREEN_WIDTH//2 - player_width//2, 
                        SCREEN_HEIGHT - player_height - 20,
                        player_width, player_height)
    aliens.clear()
    bullets.clear()
    # Create new aliens grid
    for row in range(num_rows):
        for col in range(num_cols):
            x = 50 + col * spacing_x
            y = 50 + row * spacing_y
            aliens.append(pygame.Rect(x, y, alien_width, alien_height))
    alien_direction = 1
    score = 0
    lives = 3
    game_over = False

# Create initial aliens grid
num_rows = 5
num_cols = 8
spacing_x = 80
spacing_y = 60
reset_game()

# Main game loop
clock = pygame.time.Clock()
while True:
    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and not game_over:
                # Create new bullet at player's position
                bullet = pygame.Rect(player.centerx - bullet_width//2, 
                                    player.top, 
                                    bullet_width, 
                                    bullet_height)
                bullets.append(bullet)
                if sound_enabled:
                    shoot_sound.play()
            if event.key == pygame.K_r and game_over:
                reset_game()

    if game_over:
        continue

    # Player movement
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and player.left > 0:
        player.x -= player_speed
    if keys[pygame.K_RIGHT] and player.right < SCREEN_WIDTH:
        player.x += player_speed

    # Bullet movement
    for bullet in bullets[:]:
        bullet.y -= bullet_speed
        if bullet.bottom < 0:
            bullets.remove(bullet)

    # Alien movement
    move_down = False
    for alien in aliens:
        alien.x += alien_speed * alien_direction
        
        # Check if any alien hits screen edge
        if alien.right >= SCREEN_WIDTH or alien.left <= 0:
            move_down = True

    # Handle edge collision
    if move_down:
        alien_direction *= -1
        for alien in aliens:
            alien.y += alien_drop
            # Check if any alien reaches the bottom
            if alien.bottom >= SCREEN_HEIGHT - 20:
                lives -= 1
                if lives <= 0:
                    game_over = True
                else:
                    # Reset aliens position
                    reset_game()
                    lives = lives  # Keep remaining lives
                break

    # Collision detection
    for bullet in bullets[:]:
        for alien in aliens[:]:
            if bullet.colliderect(alien):
                bullets.remove(bullet)
                aliens.remove(alien)
                score += 10
                if sound_enabled:
                    explosion_sound.play()
                break

    # Check player-alien collision
    for alien in aliens[:]:
        if player.colliderect(alien):
            lives -= 1
            if lives <= 0:
                game_over = True
            else:
                reset_game()
                lives = lives  # Keep remaining lives
            break

    # Check win condition
    if not aliens:
        game_over = True

    # Drawing
    screen.fill(BLACK)
    
    # Draw player
    pygame.draw.rect(screen, GREEN, player)
    
    # Draw bullets
    for bullet in bullets:
        pygame.draw.rect(screen, WHITE, bullet)
    
    # Draw aliens
    for alien in aliens:
        pygame.draw.rect(screen, RED, alien)
    
    # Draw UI elements
    score_text = font.render(f"Score: {score}", True, WHITE)
    screen.blit(score_text, (10, 10))
    
    lives_text = font.render(f"Lives: {lives}", True, WHITE)
    screen.blit(lives_text, (SCREEN_WIDTH - 120, 10))

    # Draw game over text
    if game_over:
        game_over_text = font.render("GAME OVER", True, RED)
        restart_text = font.render("Press R to Restart", True, WHITE)
        final_score_text = font.render(f"Final Score: {score}", True, WHITE)
        
        screen.blit(game_over_text, (SCREEN_WIDTH//2 - 100, SCREEN_HEIGHT//2 - 50))
        screen.blit(final_score_text, (SCREEN_WIDTH//2 - 120, SCREEN_HEIGHT//2))
        screen.blit(restart_text, (SCREEN_WIDTH//2 - 140, SCREEN_HEIGHT//2 + 50))

    pygame.display.flip()
    clock.tick(60)